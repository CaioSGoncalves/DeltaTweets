{"paragraphs":[{"text":"sc","user":"anonymous","dateUpdated":"2020-06-15T00:42:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592171914628_-439857964","id":"20200614-215834_1655274755","dateCreated":"2020-06-14T21:58:34+0000","dateStarted":"2020-06-15T00:42:28+0000","dateFinished":"2020-06-15T00:51:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:174","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: org.apache.spark.SparkContext = org.apache.spark.SparkContext@2e3ffd0b\n"}]}},{"text":"// Get json schema by string json sample\nval jsonstr = \"\"\" copy paste a representative sample of data here\"\"\"\nval jsondf = spark.read.json(Seq(jsonstr).toDS) //jsondf.schema has the nested json structure we need\nval event = spark.readStream.format..option...load() //configure your source\nval eventWithSchema = event.select($\"value\" cast \"string\" as \"json\").select(from_json($\"json\", jsondf.schema) as \"data\").select(\"data.*\")","user":"anonymous","dateUpdated":"2020-06-14T23:09:35+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592173607260_-1163581841","id":"20200614-222647_1195803409","dateCreated":"2020-06-14T22:26:47+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:175"},{"text":"val jsonstr = \"\"\" {\"id\": 1272287024180015105, \"text\": \"RT @iamjony94: 20 Facebook Messenger tips and tricks you may not know https://t.co/UpwFFGxH81 #socialmedia #digitalmarketing #contentmarket\\u2026\", \"username\": \"thomashilbig2\", \"created_at\": 1592182639, \"hashtags\": [\"socialmedia\", \"digitalmarketing\"], \"links\": [\"https://t.co/UpwFFGxH81\"], \"extracted_at\": 1592171844} \"\"\"\nval jsondf = spark.read.json(Seq(jsonstr).toDS) //jsondf.schema has the nested json structure we need\n\njsondf.schema\n","user":"anonymous","dateUpdated":"2020-06-14T23:12:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":121,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592172644032_-1517642573","id":"20200614-221044_1440821468","dateCreated":"2020-06-14T22:10:44+0000","dateStarted":"2020-06-14T23:09:46+0000","dateFinished":"2020-06-14T23:09:46+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:176"},{"text":"%pyspark\n# Test dataframe\nrows = [\n    ('{\"id\": 1272287018895249408, \"text\": \"\\u2014just for tonight, look inside and spark that memory of you. strong enough to get it wrong in front of all the se people. Fearless\", \"username\": \"seblwt91\", \"created_at\": 1592182637, \"hashtags\": [], \"links\": [], \"extracted_at\": 1592171843}',),\n    ('{\"id\": 1272287024180015105, \"text\": \"RT @iamjony94: 20 Facebook Messenger tips and tricks you may not know https://t.co/UpwFFGxH81 #socialmedia #digitalmarketing #contentmarket\\u2026\", \"username\": \"thomashilbig2\", \"created_at\": 1592182639, \"hashtags\": [\"socialmedia\", \"digitalmarketing\"], \"links\": [\"https://t.co/UpwFFGxH81\"], \"extracted_at\": 1592171844}', )\n    ]\ndf = spark.createDataFrame(rows, schema=[\"value\"])\ndf.printSchema()\ndf.show()","user":"anonymous","dateUpdated":"2020-06-14T23:12:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592172013790_945379543","id":"20200614-220013_555207054","dateCreated":"2020-06-14T22:00:13+0000","dateStarted":"2020-06-14T22:10:16+0000","dateFinished":"2020-06-14T22:10:16+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:177"},{"text":"%pyspark\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\n\n# SETTING SCHEMA AND FORMATTING STREAMING DATA\nschema = StructType([ \n                        StructField(\"id\", LongType(), True),\n                        StructField(\"text\", StringType(), True),\n                        StructField(\"username\", StringType(), True),\n                        StructField(\"created_at\", IntegerType(), True),\n                        StructField(\"hashtags\" , ArrayType(StringType()), True),\n                        StructField(\"links\" , ArrayType(StringType()), True),\n                        StructField(\"extracted_at\", IntegerType(), True),\n                    ])\n                        \ndata = df.selectExpr(\"CAST(value AS STRING)\")\\\n        .select(from_json(\"value\", schema).alias(\"data\")).select(\"data.*\")\ndata.printSchema()\ndata.show()","user":"anonymous","dateUpdated":"2020-06-14T23:11:59+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592172105331_-1584846530","id":"20200614-220145_94421011","dateCreated":"2020-06-14T22:01:45+0000","dateStarted":"2020-06-14T23:11:59+0000","dateFinished":"2020-06-14T23:12:00+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:178"},{"text":"%pyspark\n# READING STREAMING DATA FROM KAFKA\ndf = spark \\\n  .readStream \\\n  .format(\"kafka\") \\\n  .option(\"kafka.bootstrap.servers\", \"terraform-instance.southamerica-east1-b.c.sincere-bongo-264115.internal:9094\") \\\n  .option(\"subscribe\", \"tweets\") \\\n  .option(\"failOnDataLoss\", False) \\\n  .load()\n","user":"anonymous","dateUpdated":"2020-06-15T00:36:01+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592176305689_479076682","id":"20200614-231145_1107726820","dateCreated":"2020-06-14T23:11:45+0000","dateStarted":"2020-06-15T00:36:01+0000","dateFinished":"2020-06-15T00:36:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:179"},{"text":"%pyspark\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\n\n# SETTING SCHEMA AND FORMATTING STREAMING DATA\nschema = StructType([ \n                        StructField(\"id\", LongType(), True),\n                        StructField(\"text\", StringType(), True),\n                        StructField(\"username\", StringType(), True),\n                        StructField(\"created_at\", IntegerType(), True),\n                        StructField(\"hashtags\" , ArrayType(StringType()), True),\n                        StructField(\"links\" , ArrayType(StringType()), True),\n                        StructField(\"extracted_at\", IntegerType(), True),\n                    ])\n                        \ndata = df.selectExpr(\"CAST(value AS STRING)\")\\\n        .select(from_json(\"value\", schema).alias(\"data\")).select(\"data.*\")\n\n# data.dropDuplicates(\"id\")\n# data.printSchema()\n# data.show()","user":"anonymous","dateUpdated":"2020-06-15T00:36:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592176528985_666275217","id":"20200614-231528_786142137","dateCreated":"2020-06-14T23:15:28+0000","dateStarted":"2020-06-15T00:36:08+0000","dateFinished":"2020-06-15T00:36:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:180"},{"text":"%pyspark\n# TEST: Store in memory table\nquery = (data.writeStream.outputMode(\"append\").format(\"memory\").queryName(\"test_table\").start())","user":"anonymous","dateUpdated":"2020-06-15T00:35:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592176676532_-274614057","id":"20200614-231756_1351888368","dateCreated":"2020-06-14T23:17:56+0000","dateStarted":"2020-06-14T23:40:25+0000","dateFinished":"2020-06-14T23:40:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:181"},{"text":"%pyspark\nspark.table(\"test_table\").show()","user":"anonymous","dateUpdated":"2020-06-14T23:40:49+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+--------------------+---------------+----------+--------------------+--------------------+------------+\n|                 id|                text|       username|created_at|            hashtags|               links|extracted_at|\n+-------------------+--------------------+---------------+----------+--------------------+--------------------+------------+\n|1272312982815543296|         spark it up|      emma_gear|1592178028|                  []|                  []|  1592178033|\n|1272312986388926464|My latest blog po...|    OzKidsYALit|1592178029|                  []|[https://t.co/26j...|  1592178034|\n|1272312992399491072|Secret tapes spar...|      Darlyndd1|1592178030|                  []|[https://t.co/kBT...|  1592178035|\n|1272313004021829632|RT @MyCoachJosh: ...|      NeoMoses_|1592178033|                  []|                  []|  1592178038|\n|1272313025324822530|RT @KirkDBorne: T...|AdrianHarris890|1592178038|[DataScience, Mac...|                  []|  1592178043|\n|1272313046937989120|RT @marcusborba: ...|   Siddhant_808|1592178043|[ComputerVision, ...|                  []|  1592178048|\n+-------------------+--------------------+---------------+----------+--------------------+--------------------+------------+\n\n"}]},"apps":[],"jobName":"paragraph_1592177954184_320818905","id":"20200614-233914_1271898367","dateCreated":"2020-06-14T23:39:14+0000","dateStarted":"2020-06-14T23:40:49+0000","dateFinished":"2020-06-14T23:40:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:182"},{"text":"%pyspark\n# WRITING STREAMING DATA TO DELTA LAKE\nquery = ( data\n    .writeStream\n    .format(\"delta\")\n    .outputMode(\"append\")\n    .option(\"checkpointLocation\", \"gs://teste-caio/delta_tweets/delta/tweets/_checkpoints/etl-from-kafka\")\n    .start(\"gs://teste-caio/delta_tweets/delta/bronze_tweet\") )","user":"anonymous","dateUpdated":"2020-06-15T00:36:15+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592176430246_-2050302169","id":"20200614-231350_107648360","dateCreated":"2020-06-14T23:13:50+0000","dateStarted":"2020-06-15T00:36:15+0000","dateFinished":"2020-06-15T00:36:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:183"},{"text":"%pyspark\nprint(query.status)\nprint(\"\\n\\n\")\nprint(query.lastProgress)","user":"anonymous","dateUpdated":"2020-06-15T00:37:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"{'message': 'Writing offsets to log', 'isDataAvailable': True, 'isTriggerActive': True}\n\n\n\n{'id': 'ff9b6e8a-d789-418c-b0d4-e602fb8a5a3b', 'runId': '92e7fb42-8d8d-44cd-a64e-1957192098d6', 'name': None, 'timestamp': '2020-06-15T00:36:47.570Z', 'batchId': 0, 'numInputRows': 0, 'processedRowsPerSecond': 0.0, 'durationMs': {'addBatch': 20120, 'getBatch': 27, 'getEndOffset': 0, 'queryPlanning': 216, 'setOffsetRange': 3891, 'triggerExecution': 25877, 'walCommit': 738}, 'stateOperators': [], 'sources': [{'description': 'KafkaV2[Subscribe[tweets]]', 'startOffset': None, 'endOffset': {'tweets': {'0': 65}}, 'numInputRows': 0, 'processedRowsPerSecond': 0.0}], 'sink': {'description': 'DeltaSink[gs://teste-caio/delta_tweets/delta/bronze_tweet]'}}\n"}]},"apps":[],"jobName":"paragraph_1592176472013_-1194542279","id":"20200614-231432_418353672","dateCreated":"2020-06-14T23:14:32+0000","dateStarted":"2020-06-15T00:37:14+0000","dateFinished":"2020-06-15T00:37:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:184"},{"text":"%pyspark\n# READ FROM DELTA LAKE\nbronze_tweet = spark.read.format('delta').load(\"gs://teste-caio/delta_tweets/delta/bronze_tweet\")\nbronze_tweet.show()\n#bronze_tweet.printSchema()\n","user":"anonymous","dateUpdated":"2020-06-15T00:52:31+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+--------------------+---------------+----------+--------------------+--------------------+------------+\n|                 id|                text|       username|created_at|            hashtags|               links|extracted_at|\n+-------------------+--------------------+---------------+----------+--------------------+--------------------+------------+\n|1272327177401446400|@The_Deer_Cop Hau...|SassyCanadianCk|1592181412|                  []|[https://t.co/IbD...|  1592181417|\n|1272327185987035136|Patiently waiting...|      hafacandy|1592181414|                  []|                  []|  1592181419|\n|1272327197735424001|Adoro que no dia ...|     cassiavic_|1592181417|                  []|[https://t.co/ebo...|  1592181422|\n|1272327211081781250|RT @lookatgiulia:...|    jesyobregon|1592181420|                  []|                  []|  1592181425|\n|1272327215573872642|PySpark Data Engi...|     tech_shout|1592181421|                  []|[https://t.co/6ms...|  1592181426|\n|1272327219382272000|RT @heumaingenier...|MelendezCeciCMR|1592181422|                  []|                  []|  1592181427|\n|1272327220753625089|https://t.co/fmpO...|    PETERNATHAN|1592181422|[bi, narrative, r...|[https://t.co/fmp...|  1592181427|\n|1272327237791080449|RT @Cherwette: \"L...|  fatmaelnahass|1592181426|                  []|                  []|  1592181431|\n|1272327400551067653|@ShionTreasures E...| Sammys_Friends|1592181465|                  []|[https://t.co/oO1...|  1592181470|\n|1272327406884319232|RT @TeamLouisNews...|    lwtalwaysxx|1592181467|                  []|                  []|  1592181472|\n|1272327407471599616|Any Advice - New ...|    BlackWomen_|1592181467|                  []|[https://t.co/mlV...|  1592181472|\n|1272327429172998145|RT @BlackWomen_: ...| WomenCodersBot|1592181472|              [STEM]|                  []|  1592181477|\n|1272327429575585792|RT @BlackWomen_: ...|    thebotbuddy|1592181472|              [STEM]|                  []|  1592181477|\n|1272327429558853635|RT @BlackWomen_: ...|       femtech_|1592181472|              [STEM]|                  []|  1592181477|\n|1272327431039283200|RT @BlackWomen_: ...|learn__together|1592181472|              [STEM]|                  []|  1592181478|\n|1272327329222742018|RT @marcusborba: ...|       Gonza10V|1592181448|[AI, SmartCity, A...|                  []|  1592181453|\n|1272327345836306437|RT @JeffFriedmanF...|     A_MAJEED01|1592181452|                  []|[http://t.co/rsxi...|  1592181457|\n|1272327357609762816|RT @FernandoHuama...| OttLegalRebels|1592181455|[MachineLearning,...|                  []|  1592181460|\n|1272327251674030080|RT @PETERNATHAN: ...|    PETERNATHAN|1592181430|[bi, narrative, r...|[https://t.co/fmp...|  1592181435|\n|1272327266299715593|The NBA players h...|SunnyWitMySunni|1592181433|                  []|[https://t.co/9fj...|  1592181438|\n+-------------------+--------------------+---------------+----------+--------------------+--------------------+------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1592177240117_-503313331","id":"20200614-232720_1333796332","dateCreated":"2020-06-14T23:27:20+0000","dateStarted":"2020-06-15T00:52:31+0000","dateFinished":"2020-06-15T00:53:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:185"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-06-15T00:37:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592181443023_46472134","id":"20200615-003723_1150369385","dateCreated":"2020-06-15T00:37:23+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:186"}],"name":"DeltaTweets_KafkaIngestion","id":"2FDCGPHJ1","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}